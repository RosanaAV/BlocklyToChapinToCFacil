/*
Nivel 2 del tfg
En este nivel se crea el parser para una sentencia que almacena una variable y 
la muestra una frase por pantalla	
*/

options {
	//DEBUG_TOKEN_MANAGER=true;
    BUILD_TOKEN_MANAGER=true;
    COMMON_TOKEN_ACTION=false;
}

/*Aqui se define la clase que implementará el parser
Se abre el fichero a analizar y se imprime por pantalla el resultado de los análisis
*/
PARSER_BEGIN(practica)

public class practica {
    	public static void main(String args[]) throws java.io.FileNotFoundException {
                      // throws ParseException // this is only thrown in the parser
    		
    		practicaTokenManager tkmngr;
			
        
			if ( args.length < 1 ) {
       	         		tkmngr = new practicaTokenManager(new SimpleCharStream(System.in));//entrada por teclado
        		} else {	
                 		tkmngr = new practicaTokenManager(new SimpleCharStream( new java.io.FileInputStream(args[0]),0,0 ));//si se abre un archivo
    			};
	 
			Token tk;

    			try {
        			while ( (tk = tkmngr.getNextToken()).kind != EOF )  ; //lector de lexicos

    			} catch (TokenMgrError x) {
          			System.out.println("Error, Algo salio mal.\n"); //si se produce eun fallo 
          			throw x;
    			};

			//Resultados finales
 	   		//System.out.println("\n"+tkmngr.texto);
           		
    	}
	}
PARSER_END(practica)

//Declaración de variables
TOKEN_MGR_DECLS:
{
	static String texto = new String();
	static String variable = new String();
	static String variable2 = new String();
	static String variable3 = new String();
	static String variable4 = new String();
	static int finBlock=0;
	static int next=0;
	
}


//Declaración de tokens
TOKEN:
{
	< Name: ( <NameStarChar> )( <NameChar> )* >
	| < #NameChar: ( <NameStarChar> )|"-"|"."|["0"-"9"]|"\u00B7" >
	| < #NameStarChar: ["A"-"Z"]|"_"|["a"-"z"]|["\u00C0"-"\u00D6"]|["\u00D8"-"\u00F6"] >
	| < #S: (" " | "\t" | "\n" | "\r")+ >
	| < Entero: ("-")?(["0"-"9"])+ >
	| < Flotante: ("-")?((["0"-"9"])+ | (["0"-"9"])+ "."(["0"-"9"]))+((["e","E"])(["-","+"])?(["0"-"9"])+)? >
}

//Declaración de los estados iniciales
TOKEN :	
{
	< ETIXML: "<xml" > {
		System.out.println("//#define PROGRAMA \"Nivel 2\"");
		System.out.println("//#define DESCRIPCION \"Programa del nivel 2\"");
		System.out.println("//#define AUTOR \"Programa generado automaticamente para TFG_BlocklyToChapinToCFacil\"");
		System.out.println("//#define VERSION  \"v1.0\"");
		System.out.println("\n#include \"c_facil.h\"");
		System.out.println("\n\nPRG(){");
	} : XML
}


<XML>TOKEN:
{
   	< ETIBLOQUE: "<block" > : BLOQUE					
}

<BLOQUE>TOKEN:
{
	<ETIFINXML: "/xml>" > {System.out.printf("\n}");} : DEFAULT
	|< ETIFINBLOQUE: "/block>" > {if(next==0){System.out.printf(");\n");}} : BLOQUE
	|< ETIPRINT: (<S>)?"type=\"text_print\""(<S>)? > : PRINT
	|< ETIFIN: (<S>)?"</value"(<S>)? > : BLOQUE
	|< ETIVARSET: (<S>)?"type=\"variables_set\""(<S>)? > {System.out.printf("asignaValorA(");} : NOM
	|< ETIPROMPT:(<S>)?"type=\"text_prompt_ext\""(<S>)? > : TEXTPROMPT
	|< ETINEXT: (<S>)?"next" > {if(next==1){System.out.printf(");\n");};next=1;} : BLOQUE
	|< ETIVARGET : (<S>)?"type=\"variables_get\""(<S>)? > : NOM
	|< ETIFINNEXT: (<S>)?"/next" > {System.out.printf(");\n");} : BLOQUE
}

<PRINT>TOKEN:
{
	<TEXTOPRINT: (<S>)?"field name=\"TEXT\">" > : TEXT
}

<TEXT1>TOKEN:
{
	<TEXT2: (<S>)?"TEXT\">" > : TEXT
}

<TEXT>TOKEN:
{
	< CARACTER: (~["<"])* > {
			texto = new String(image);
	} : SIGUIENTE
}	

<SIGUIENTE>TOKEN:
{
	<ETITEXT: (<S>)?"block type=\"text\""(<S>)? > : TEXT1
	|<ETIBLOCKGET: (<S>)?"block type=\"variables_get\""(<S>)? > {System.out.printf("escribeNumero(");} : NOM2
	|<ETIFINVALUE: (<S>)?"</value"(<S>)? > {System.out.printf("escribeFrase(\""+texto+"\"");} : BLOQUE
}

<NOM>TOKEN:
{
	<CARACTER2: (<S>)?"VAR\">" > : NOMVAR
}

<NOMVAR>TOKEN:
{
	< CARACTER3: (~["<"])* > {
			variable = new String(image);
			System.out.printf(variable);
	} : BLOQUE	
}

<NOM2>TOKEN:
{
	<CARACTER4: (<S>)?"VAR\">" > : NOMVAR2
}

<NOMVAR2>TOKEN:
{
	< CARACTER5: (~["<"])* > {
			variable2 = new String(image);
			System.out.printf(variable2);
	} : BLOQUE	
}

<NUM>TOKEN:
{
	<CARACTER8: (<S>)?"NUM\">" > : NUM2
}

<NUM2>TOKEN:
{
	< CARACTER9: (~["<"])* > {
			variable4 = new String(image);
			System.out.printf(variable4);
	} : BLOQUE	
}

<TEXTPROMPT>TOKEN:
{
	<ETIMUTATION: (<S>)?"mutation type=\"NUMBER"(<S>)? > {
			System.out.printf(", pideNumero(\"");			
	} : FRASEPROMPT
	|<ETIMUTATIONTEXT: (<S>)?"mutation type=\"TEXT"(<S>)? > {
			System.out.printf(", pideCaracter(\"");			
	} : FRASEPROMPT
}

<FRASEPROMPT>TOKEN:
{
	<CARACTER6: (<S>)?"field name=\"TEXT\">" > : FRASEPROMPT2
}

<FRASEPROMPT2>TOKEN:
{
	< CARACTER7: (~["<"])* > {
		variable3 = new String(image);
	} : FRASEPROMPT3
}

<FRASEPROMPT3>TOKEN:
{
	<ETINUMBERPROMPT: (<S>)?"block type=\"text\""(<S>)? > : TEXTOPROMPT
	|<ETIFINVALUEPROMPT: (<S>)?"</value"(<S>)? > {System.out.printf(variable3+"\")");} : BLOQUE
}


<TEXTOPROMPT>TOKEN:
{
	<CARACTER10: (<S>)?"TEXT\">" > : TEXTOPROMPT2
}

<TEXTOPROMPT2>TOKEN:
{
	< CARACTER11: (~["<"])* > {
			variable3 = new String(image);
	} : FRASEPROMPT3
}	



//En cualquier estado, si encuentra cualquier caracter no hace nada
<*>SKIP :
{
   <~[]>
}